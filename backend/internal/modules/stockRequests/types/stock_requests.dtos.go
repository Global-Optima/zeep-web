package types

import (
	"errors"
	"time"

	"github.com/Global-Optima/zeep-web/backend/internal/data"
	"github.com/Global-Optima/zeep-web/backend/internal/localization"
	storeTypes "github.com/Global-Optima/zeep-web/backend/internal/modules/stores/types"
	stockMaterialTypes "github.com/Global-Optima/zeep-web/backend/internal/modules/warehouse/stockMaterial/types"
	warehouseTypes "github.com/Global-Optima/zeep-web/backend/internal/modules/warehouse/types"

	"github.com/Global-Optima/zeep-web/backend/pkg/utils"
)

type CreateStockRequestDTO struct {
	StockMaterials []StockRequestStockMaterialDTO `json:"stockMaterials" binding:"required"`
}

type StockRequestStockMaterialDTO struct {
	StockMaterialID uint    `json:"stockMaterialId" binding:"required"`
	Quantity        float64 `json:"quantity" binding:"required,gt=0"`
}

type RejectStockRequestStatusDTO struct {
	Comment *string `json:"comment" binding:"required"`
}

type AcceptWithChangeRequestStatusDTO struct {
	Comment *string                        `json:"comment" binding:"required"`
	Items   []StockRequestStockMaterialDTO `json:"items" binding:"required"`
}

type UpdateIngredientDates struct {
	DeliveredDate  time.Time
	ExpirationDate time.Time
}

type StockRequestResponse struct {
	RequestID            uint                           `json:"requestId"`
	Status               data.StockRequestStatus        `json:"status"`
	StoreComment         *string                        `json:"storeComment,omitempty"`
	AutoGeneratedComment *localization.LocalizedMessage `json:"autogeneratedComment,omitempty"`
	WarehouseComment     *string                        `json:"warehouseComment,omitempty"`
	Store                storeTypes.StoreDTO            `json:"store"`
	Warehouse            warehouseTypes.WarehouseDTO    `json:"warehouse"`
	StockMaterials       []StockRequestMaterial         `json:"stockMaterials"`
	CreatedAt            time.Time                      `json:"createdAt"`
	UpdatedAt            time.Time                      `json:"updatedAt"`
}

type StockRequestMaterial struct {
	StockMaterial stockMaterialTypes.StockMaterialsDTO `json:"stockMaterial"`
	Quantity      float64                              `json:"quantity"`
}

type GetStockRequestsFilter struct {
	utils.BaseFilter
	StoreID     *uint      `form:"storeId"`
	WarehouseID *uint      `form:"warehouseId"`
	StartDate   *time.Time `form:"startDate"`
	EndDate     *time.Time `form:"endDate"`
	Search      *string    `form:"search"`

	Statuses []data.StockRequestStatus `form:"statuses[]"`
}

var (
	ErrExistingRequest   = errors.New("existing stock request found")
	ErrInsufficientStock = errors.New("insufficient stock to fulfill the request")
	ErrOneRequestPerDay  = errors.New("only one request allowed per day")
)
