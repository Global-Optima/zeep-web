# ====================
# Global Configuration
# ====================
worker_processes  auto;

events {
    worker_connections  4096; 
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Performance optimizations
    sendfile        on; 
    tcp_nopush      on; 
    tcp_nodelay     on; 
    keepalive_timeout 65; 
    client_max_body_size 50M;  
    client_body_buffer_size 128k; 

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_proxied any;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;" always; 
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()"; 

    # Proxy buffering settings
    proxy_buffering on;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;

    # Upstream backend server
    upstream backend {
        server backend:8080;
        keepalive 32;
    }

    # ====================
    # HTTP Server (Redirect to HTTPS)
    # ====================
    server {
        listen 80;
        server_name ${NGINX_SERVER_NAME};

        # ACME Challenge Location
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # ====================
    # HTTPS Server
    # ====================
    server {
        listen 443 ssl;
        server_name ${NGINX_SERVER_NAME};

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/${NGINX_SERVER_NAME}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${NGINX_SERVER_NAME}/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Root and Index
        root /usr/share/nginx/html;
        index index.html index.htm;

        # External Kaspi Proxy
        location ~ ^/external/kaspi/([\d\.]+)/(\d+)/(.*)$ {
            resolver 8.8.8.8 valid=300s ipv6=off;
            set $target https://$1:$2/$3;
            
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            proxy_ssl_name $1;

            proxy_pass $target;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API Proxy
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $http_connection;
            proxy_read_timeout 86400;
            proxy_buffering off;
        }

        # Static Files
        location / {
            try_files $uri $uri/ /index.html;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Error Handling
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Security Restrictions
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~* \.(log|bak)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}