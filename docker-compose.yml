services:
  ########################################################################
  # 1) Traefik - Reverse Proxy for Automatic HTTPS via Let's Encrypt
  ########################################################################
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - '--api.dashboard=true'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      # Letâ€™s Encrypt ACME config
      - '--certificatesresolvers.myresolver.acme.httpchallenge=true'
      - '--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web'
      - '--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
    ports:
      - '80:80' # HTTP
      - '443:443' # HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    networks:
      - app_network

  ########################################################################
  # 2) PostgreSQL Database
  ########################################################################
  db:
    container_name: db
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  postgres_exporter:
    container_name: postgres_exporter
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: 'postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable'
    ports:
      - '9187:9187'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  # pgAdmin (Optional for Development)
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD}
    ports:
      - '8081:80'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  ########################################################################
  # 3) Redis
  ########################################################################
  redis:
    container_name: redis
    image: redis:latest
    command:
      [
        'redis-server',
        '--requirepass',
        '${REDIS_PASSWORD}',
        '--appendonly',
        'yes',
      ]
    env_file:
      - .env
    environment:
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  ########################################################################
  # 4) Backend (Golang Gin)
  ########################################################################
  backend:
    container_name: backend
    build:
      context: ./backend
      args:
        ENV: ${BACKEND_ENV}
        DB_HOST: ${DB_HOST}
        DB_PORT: ${DB_PORT}
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        DB_NAME: ${DB_NAME}
        DB_SSL_MODE: ${DB_SSL_MODE}
        SERVER_PORT: ${SERVER_PORT}
        CLIENT_URL: ${CLIENT_URL}
        JWT_CUSTOMER_SECRET_KEY: ${JWT_CUSTOMER_SECRET_KEY}
        JWT_EMPLOYEE_SECRET_KEY: ${JWT_EMPLOYEE_SECRET_KEY}
        JWT_CUSTOMER_TOKEN_TTL: ${JWT_CUSTOMER_TOKEN_TTL}
        JWT_EMPLOYEE_TOKEN_TTL: ${JWT_EMPLOYEE_TOKEN_TTL}
        S3_ACCESS_KEY: ${S3_ACCESS_KEY}
        S3_SECRET_KEY: ${S3_SECRET_KEY}
        S3_ACCESS_ENDPOINT: ${S3_ACCESS_ENDPOINT}
        S3_RESPONSE_ENDPOINT: ${S3_RESPONSE_ENDPOINT}
        S3_BUCKET_NAME: ${S3_BUCKET_NAME}
        REDIS_USERNAME: ${REDIS_USERNAME}
        REDIS_HOST: ${REDIS_HOST}
        REDIS_PORT: ${REDIS_PORT}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        REDIS_DB: ${REDIS_DB}
        REDIS_ENABLE_TLS: ${REDIS_ENABLE_TLS}
        DEFAULT_PAGE: ${DEFAULT_PAGE}
        DEFAULT_PAGE_SIZE: ${DEFAULT_PAGE_SIZE}
        MAX_PAGE_SIZE: ${MAX_PAGE_SIZE}
        PAYMENT_SECRET: ${PAYMENT_SECRET}
    env_file:
      - .env
    ports:
      - '8080:8080'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - app_network

  ########################################################################
  # 5) Frontend (Vite Vue 3) w/ Nginx
  ########################################################################
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_WS_URL: ${VITE_WS_URL}
        VITE_PAYMENT_SECRET: ${PAYMENT_SECRET}
        VITE_TEST_PAYMENT: ${VITE_TEST_PAYMENT}
    env_file:
      - .env
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME}
    networks:
      - app_network
    depends_on:
      backend:
        condition: service_started
    labels:
      # Enable Traefik for this service
      - 'traefik.enable=true'

      # HTTPS router
      - 'traefik.http.routers.frontend-https.rule=Host(`${NGINX_SERVER_NAME}`)'
      - 'traefik.http.routers.frontend-https.entrypoints=websecure'
      - 'traefik.http.routers.frontend-https.tls=true'
      - 'traefik.http.routers.frontend-https.tls.certresolver=myresolver'

      # HTTP router for redirect -> HTTPS
      - 'traefik.http.routers.frontend-http.rule=Host(`${NGINX_SERVER_NAME}`)'
      - 'traefik.http.routers.frontend-http.entrypoints=web'
      - 'traefik.http.middlewares.default-redirect.redirectscheme.scheme=https'
      - 'traefik.http.routers.frontend-http.middlewares=default-redirect'

      # Internal port that Nginx listens on
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'

  ########################################################################
  # 6) Prometheus (Metrics Collection)
  ########################################################################
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    depends_on:
      - cadvisor
    networks:
      - app_network

  blackbox_exporter:
    container_name: blackbox_exporter
    image: prom/blackbox-exporter:latest
    ports:
      - '9115:9115'
    volumes:
      - ./infrastructure/monitoring/blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - app_network

  ########################################################################
  # 7) System Monitoring
  ########################################################################
  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter:latest
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netclass.ignored-devices=^(veth.*)$$'
      - '--collector.systemd'
      - '--collector.processes'
    networks:
      - app_network

  ########################################################################
  # 8) Grafana (Visualization)
  ########################################################################
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app_network

  ########################################################################
  # 9) Loki (Logging)
  ########################################################################
  loki:
    container_name: loki
    image: grafana/loki:latest
    volumes:
      - ./infrastructure/monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - ./loki-data/wal:/tmp/loki/wal
      - ./loki-data/index:/tmp/loki/index
      - ./loki-data/cache:/tmp/loki/cache
      - ./loki-data/chunks:/tmp/loki/chunks
      - ./loki-data/compactor:/tmp/loki/compactor
    ports:
      - '3100:3100'
    networks:
      - app_network

  ########################################################################
  # 10) Promtail (Log Shipper for Loki)
  ########################################################################
  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./infrastructure/monitoring/promtail-config.yaml:/etc/promtail/config.yml
      - ./backend/logs:/app/logs
    depends_on:
      - loki
    networks:
      - app_network

  ########################################################################
  # 11) cAdvisor (Container Metrics)
  ########################################################################
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - '8082:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_network

######################################################################
# Named Volumes
######################################################################
volumes:
  db_data:
  redis_data:
  grafana_data:

######################################################################
# Docker Network
######################################################################
networks:
  app_network:
    driver: bridge
