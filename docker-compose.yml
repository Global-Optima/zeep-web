services:
  # PostgreSQL Database
  db:
    container_name: db
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  postgres_exporter:
    container_name: postgres_exporter
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: 'postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable'
    ports:
      - '9187:9187'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  # pgAdmin (Optional for Development)
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD}
    ports:
      - '8081:80'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  # Redis
  redis:
    container_name: redis
    image: redis:latest
    command:
      [
        'redis-server',
        '--requirepass',
        '${REDIS_PASSWORD}',
        '--appendonly',
        'yes',
      ]
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Backend (Golang Gin)
  backend:
    container_name: backend
    build:
      context: ./backend
      args:
        ENV: ${BACKEND_ENV}
        DB_HOST: ${DB_HOST}
        DB_PORT: ${DB_PORT}
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        DB_NAME: ${DB_NAME}
        SERVER_PORT: ${SERVER_PORT}
        CLIENT_URL: ${CLIENT_URL}
        JWT_CUSTOMER_SECRET_KEY: ${JWT_CUSTOMER_SECRET_KEY}
        JWT_EMPLOYEE_SECRET_KEY: ${JWT_EMPLOYEE_SECRET_KEY}
        JWT_CUSTOMER_ACCESS_TOKEN_TTL: ${JWT_CUSTOMER_ACCESS_TOKEN_TTL}
        JWT_CUSTOMER_REFRESH_TOKEN_TTL: ${JWT_CUSTOMER_REFRESH_TOKEN_TTL}
        JWT_EMPLOYEE_ACCESS_TOKEN_TTL: ${JWT_EMPLOYEE_ACCESS_TOKEN_TTL}
        JWT_EMPLOYEE_REFRESH_TOKEN_TTL: ${JWT_EMPLOYEE_REFRESH_TOKEN_TTL}
        S3_ACCESS_KEY: ${S3_ACCESS_KEY}
        S3_SECRET_KEY: ${S3_SECRET_KEY}
        S3_ENDPOINT: ${S3_ENDPOINT}
        S3_BUCKET_NAME: ${S3_BUCKET_NAME}
        REDIS_HOST: ${REDIS_HOST}
        REDIS_PORT: ${REDIS_PORT}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        REDIS_DB: ${REDIS_DB}
        DEFAULT_PAGE: ${DEFAULT_PAGE}
        DEFAULT_PAGE_SIZE: ${DEFAULT_PAGE_SIZE}
        MAX_PAGE_SIZE: ${MAX_PAGE_SIZE}
    env_file:
      - .env
    ports:
      - '8080:8080'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - app_network

  # Frontend (Vite Vue 3)
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_WS_URL: ${VITE_WS_URL}
    env_file:
      - .env
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME}
    depends_on:
      - backend
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./certs:/etc/letsencrypt
      - ./certs-data:/var/www/certbot
      - ./frontend/nginx.template.conf:/etc/nginx/nginx.template.conf
      - ./frontend/scripts/frontend-entrypoint.sh:/frontend-entrypoint.sh
    networks:
      - app_network

  certbot:
    build:
      context: ./certbot
    container_name: certbot
    env_file:
      - .env
    volumes:
      - ./certs:/etc/letsencrypt
      - ./certs-data:/var/www/certbot
      - ./certbot/scripts/certbot-entrypoint.sh:/certbot-entrypoint.sh
    depends_on:
      - frontend

  # Prometheus (Metrics Collection)
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    depends_on:
      - cadvisor
    networks:
      - app_network

  blackbox_exporter:
    container_name: blackbox_exporter
    image: prom/blackbox-exporter:latest
    ports:
      - '9115:9115'
    volumes:
      - ./monitoring/blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - app_network

  # System Monitoring
  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter:latest
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netclass.ignored-devices=^(veth.*)$$'
      - '--collector.systemd'
      - '--collector.processes'
    networks:
      - app_network

  # Grafana (Visualization)
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app_network

  # Loki (Logging)
  loki:
    container_name: loki
    image: grafana/loki:latest
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - ./loki-data/wal:/tmp/loki/wal
      - ./loki-data/index:/tmp/loki/index
      - ./loki-data/cache:/tmp/loki/cache
      - ./loki-data/chunks:/tmp/loki/chunks
      - ./loki-data/compactor:/tmp/loki/compactor
    ports:
      - '3100:3100'
    networks:
      - app_network

  # Promtail (Log Shipper for Loki)
  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml
      - ./backend/logs:/app/logs
    depends_on:
      - loki
    networks:
      - app_network

  # cAdvisor (Container Metrics)
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - '8082:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_network

# Volumes
volumes:
  db_data:
  redis_data:
  grafana_data:

# Networks
networks:
  app_network:
    driver: bridge
