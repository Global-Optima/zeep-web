services:
  # PostgreSQL Database
  db:
    container_name: db
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # pgAdmin (Optional for Development)
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD}
    ports:
      - '8081:80'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  # Redis
  redis:
    container_name: redis
    image: redis:latest
    command:
      [
        'redis-server',
        '--requirepass',
        '${REDIS_PASSWORD}',
        '--appendonly',
        'yes',
      ]
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Backend (Golang Gin)
  backend:
    container_name: backend
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    ports:
      - '8080:8080'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  # Frontend (Vite Vue 3)
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_WS_URL: ${VITE_WS_URL}
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
    ports:
      - '80:80'
    networks:
      - app_network

# Volumes
volumes:
  db_data:
  redis_data:

# Networks
networks:
  app_network:
    driver: bridge
