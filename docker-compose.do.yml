services:
  ########################################################################
  # 4) Backend (Golang Gin)
  ########################################################################
  backend:
    container_name: backend
    build:
      context: ./backend
      args:
        ENV: ${BACKEND_ENV}
        DB_HOST: ${DB_HOST}
        DB_PORT: ${DB_PORT}
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        DB_NAME: ${DB_NAME}
        SERVER_PORT: ${SERVER_PORT}
        CLIENT_URL: ${CLIENT_URL}
        JWT_CUSTOMER_SECRET_KEY: ${JWT_CUSTOMER_SECRET_KEY}
        JWT_EMPLOYEE_SECRET_KEY: ${JWT_EMPLOYEE_SECRET_KEY}
        JWT_CUSTOMER_ACCESS_TOKEN_TTL: ${JWT_CUSTOMER_ACCESS_TOKEN_TTL}
        JWT_CUSTOMER_REFRESH_TOKEN_TTL: ${JWT_CUSTOMER_REFRESH_TOKEN_TTL}
        JWT_EMPLOYEE_ACCESS_TOKEN_TTL: ${JWT_EMPLOYEE_ACCESS_TOKEN_TTL}
        JWT_EMPLOYEE_REFRESH_TOKEN_TTL: ${JWT_EMPLOYEE_REFRESH_TOKEN_TTL}
        S3_ACCESS_KEY: ${S3_ACCESS_KEY}
        S3_SECRET_KEY: ${S3_SECRET_KEY}
        S3_ENDPOINT: ${S3_ENDPOINT}
        S3_BUCKET_NAME: ${S3_BUCKET_NAME}
        REDIS_HOST: ${REDIS_HOST}
        REDIS_PORT: ${REDIS_PORT}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        REDIS_DB: ${REDIS_DB}
        DEFAULT_PAGE: ${DEFAULT_PAGE}
        DEFAULT_PAGE_SIZE: ${DEFAULT_PAGE_SIZE}
        MAX_PAGE_SIZE: ${MAX_PAGE_SIZE}
        PAYMENT_SECRET: ${PAYMENT_SECRET}
    env_file:
      - .env
    ports:
      - '8080:8080'
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - app_network

  ########################################################################
  # 5) Frontend (Vite Vue 3) w/ Nginx
  ########################################################################
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_WS_URL: ${VITE_WS_URL}
        VITE_PAYMENT_SECRET: ${PAYMENT_SECRET}
    env_file:
      - .env
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME}
    networks:
      - app_network
    depends_on:
      backend:
        condition: service_started

  ########################################################################
  # 6) Prometheus (Metrics Collection)
  ########################################################################
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    depends_on:
      - cadvisor
    networks:
      - app_network

  blackbox_exporter:
    container_name: blackbox_exporter
    image: prom/blackbox-exporter:latest
    ports:
      - '9115:9115'
    volumes:
      - ./infrastructure/monitoring/blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - app_network

  ########################################################################
  # 7) System Monitoring
  ########################################################################
  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter:latest
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netclass.ignored-devices=^(veth.*)$$'
      - '--collector.systemd'
      - '--collector.processes'
    networks:
      - app_network

  ########################################################################
  # 8) Grafana (Visualization)
  ########################################################################
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app_network

  ########################################################################
  # 9) Loki (Logging)
  ########################################################################
  loki:
    container_name: loki
    image: grafana/loki:latest
    volumes:
      - ./infrastructure/monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - ./loki-data/wal:/tmp/loki/wal
      - ./loki-data/index:/tmp/loki/index
      - ./loki-data/cache:/tmp/loki/cache
      - ./loki-data/chunks:/tmp/loki/chunks
      - ./loki-data/compactor:/tmp/loki/compactor
    ports:
      - '3100:3100'
    networks:
      - app_network

  ########################################################################
  # 10) Promtail (Log Shipper for Loki)
  ########################################################################
  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./infrastructure/monitoring/promtail-config.yaml:/etc/promtail/config.yml
      - ./backend/logs:/app/logs
    depends_on:
      - loki
    networks:
      - app_network

  ########################################################################
  # 11) cAdvisor (Container Metrics)
  ########################################################################
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - '8082:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_network

######################################################################
# Named Volumes
######################################################################
volumes:
  grafana_data:

######################################################################
# Docker Network
######################################################################
networks:
  app_network:
    driver: bridge
